guidance on implementation

    as we get closer to the deadline, become more willing to sacrifice good design/architecture for the sake of just getting the required functionality working. if you can't show the basic functions, the great design isn't much use to anybody. the main thing is to be as intentional about it as you can - understand that you're compromising now, understand how you're compromising - ideally, explain it in a code comment - and be ready to write it better in the next project. perfectionism or missing the forest for the trees can be a big challenge for some people. keep that deadline in mind and prioritize the required functionality.
    if you're struggling and behind, i suggest working on one feature at a time, as fully working features from the UI all the way to the DB, starting with ones that seem easier to you. (rather than, say, 100% implementing each class one at a time.)

    1. the console app project should not directly access the dbcontext at all, except maybe for creating it. that is the job of repository class(es) in another project.
    2. the console app project should not use any of the entity classes generated by entity framework. that is the job of repository class(es) in another project.
    3. the ef-generated classes should not be modified to add business logic. that is the job of the business logic library project.
    4. somewhere you will presumably need to convert between data access objects and business logic objects, and it should not be in the console app.
    5. there should not be any use of Console except in the console app project.

    https://martinfowler.com/bliki/PresentationDomainDataLayering.html

    the job of the repository is just to keep all the entity-framework-related code in one place (so if things related to EF changed, you'd only have to fix issues in one place). the alternative would be to just use the dbcontext in helper methods in the console app, or even using it all over your main method or something. it would work, it would just be messier.
    put differently, the job of a repository class is to expose simple data-storage operations (CRUD - create, read update, delete) on your business logic models - and the fact that they need to map them to and from these Entity Framework entities is just an implementation detail of them, encapsulated, and not something the rest of the code needs to know about.

    the workflow in restaurant reviews for, e.g. a new thing to create is like:
    1. get user input
    2. put it into a business logic object
    3. pass that object to the repository's add method
    4. inside that add method, we convert the business logic object to a data access object
    5. that data access object is added to a DbSet and we call SaveChanges.
    it's not essential to have two different sets of objects like that but it allows flexibility in how you represent things in the business logic side. you can use Dictionaries and things that EF can't handle.

    if you are behind with p0 trying to decide where to focus energies in what priority... rather than doing the whole UI part or the whole EF part at once, i recommend working feature by feature, starting with the more basic prerequisites.

    remember you can make incremental updates to your data model: in db-first with SQL and then re-scaffolding; in code-first with adding a migration and updating the db.

    with EF, don't forget about how you need the methods Include and ThenInclude to load data from multiple table at once into the navigation properties, otherwise they will appear null (unless this context has already loaded them in some earlier query)

    as for how to get initial data into your DB... you can actually apply it using migrations alongside the table structure using HasData method, check the docs on it. but the simplest way for both db first and code first would just be to maintain a .sql file with a bunch of INSERT INTO to provide the initial data. even if you're doing code-first, of course you can still connect with SSMS and run commands.

    you are free to work alongside each other on project 0 and trade ideas and solutions to problems so long as you are not looking at another associate's code while you write your own, or of course copying it, no matter how much you change it afterwards.

guidance on presentation

    the expectations for project 0 presentation. they'll start at 10:00 tomorrow and have 5 minutes each, then you can expect questions from QC and from trainer. questions may be about the project's overall design, about how you may have used or not used features of C# or SQL in it. questions might also just be on last week's content in general.
    you should begin with an introduction giving your name, that then covers both the business purpose of the app, and the technologies used.
    then you should demo the application, walking through its features and explaining them as they go. there may not be time to show everything, but they can show us most and tell us about the rest. looking at the p0 requirements, we may assume anything you do not show or mention verbally is incomplete.
    you should prepare a demo workflow which effectively and rapidly shows as much functionality as they can.
    then, a good concluding sentence or two, so it doesn't just trail off, and ask for questions.
    it's essential to practice and plan. it is very obvious when someone has not practiced.
    you should speak with volume, energy, and confidence, using the webcam to start out, but then moving to screen-sharing for the demo.
    you don't have to show any code in the presentation, but if you have time for it, there's nothing wrong with it.
    when it's your turn, you should be ready to go... not "oh i forgot to start visual studio, oh where is my solution, etc. etc."
